package com.daacooerp.erp.service;

import com.daacooerp.erp.entity.Inventory;
import com.daacooerp.erp.repository.InventoryRepository;
import com.daacooerp.erp.service.impl.InventoryServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import jakarta.persistence.EntityNotFoundException;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

/**
 * 库存服务测试类
 * 测试库存相关的业务逻辑
 */
@ExtendWith(MockitoExtension.class)
public class InventoryServiceTest {

    @Mock
    private InventoryRepository inventoryRepository;

    @InjectMocks
    private InventoryServiceImpl inventoryService;

    private Inventory testInventory;
    private List<Inventory> inventoryList;

    @BeforeEach
    void setUp() {
        testInventory = new Inventory();
        testInventory.setId(1L);
        testInventory.setProductName("测试商品");
        testInventory.setProductCode("TEST001");
        testInventory.setQuantity(100);
        testInventory.setUnit("个");
        testInventory.setUnitPrice(10.50);
        testInventory.setLocation("A区-01");
        testInventory.setCategory("电子产品");
        testInventory.setWarningThreshold(10);
        testInventory.setCreatedAt(LocalDateTime.now());
        testInventory.setUpdatedAt(LocalDateTime.now());

        Inventory inventory2 = new Inventory();
        inventory2.setId(2L);
        inventory2.setProductName("测试商品2");
        inventory2.setProductCode("TEST002");
        inventory2.setQuantity(50);
        inventory2.setUnit("件");
        inventory2.setUnitPrice(25.00);
        inventory2.setLocation("B区-02");
        inventory2.setCategory("办公用品");
        inventory2.setWarningThreshold(5);
        inventory2.setCreatedAt(LocalDateTime.now());
        inventory2.setUpdatedAt(LocalDateTime.now());

        inventoryList = Arrays.asList(testInventory, inventory2);
    }

    /**
     * 测试获取库存列表
     */
    @Test
    void testGetInventoryList() {
        // 模拟仓库行为
        Pageable pageable = PageRequest.of(0, 10);
        Page<Inventory> inventoryPage = new PageImpl<>(inventoryList, pageable, inventoryList.size());
        when(inventoryRepository.findAll(pageable)).thenReturn(inventoryPage);

        // 执行测试
        Page<Inventory> result = inventoryService.getInventoryList(0, 10);

        // 验证结果
        assertNotNull(result);
        assertEquals(2, result.getContent().size());
        assertEquals("测试商品", result.getContent().get(0).getProductName());
        assertEquals("测试商品2", result.getContent().get(1).getProductName());

        // 验证仓库方法调用
        verify(inventoryRepository).findAll(pageable);
    }

    /**
     * 测试根据ID获取库存详情
     */
    @Test
    void testGetInventoryById() {
        // 模拟仓库行为
        when(inventoryRepository.findById(1L)).thenReturn(Optional.of(testInventory));

        // 执行测试
        Inventory result = inventoryService.getInventoryById(1L);

        // 验证结果
        assertNotNull(result);
        assertEquals(1L, result.getId());
        assertEquals("测试商品", result.getProductName());
        assertEquals("TEST001", result.getProductCode());
        assertEquals(100, result.getQuantity());

        // 验证仓库方法调用
        verify(inventoryRepository).findById(1L);
    }

    /**
     * 测试根据ID获取库存详情 - 库存不存在
     */
    @Test
    void testGetInventoryByIdNotFound() {
        // 模拟仓库行为
        when(inventoryRepository.findById(999L)).thenReturn(Optional.empty());

        // 执行测试并验证异常
        EntityNotFoundException exception = assertThrows(
                EntityNotFoundException.class,
                () -> inventoryService.getInventoryById(999L)
        );

        assertEquals("库存不存在，ID: 999", exception.getMessage());

        // 验证仓库方法调用
        verify(inventoryRepository).findById(999L);
    }

    /**
     * 测试创建库存 - 自动生成商品编码
     */
    @Test
    void testCreateInventoryWithAutoGeneratedCode() {
        // 准备测试数据
        Inventory newInventory = new Inventory();
        newInventory.setProductName("新商品");
        newInventory.setQuantity(200);
        newInventory.setUnit("箱");
        newInventory.setUnitPrice(15.00);
        newInventory.setCategory("食品");

        Inventory savedInventory = new Inventory();
        savedInventory.setId(3L);
        savedInventory.setProductName("新商品");
        savedInventory.setProductCode("FOOD001"); // 根据分类生成的编码
        savedInventory.setQuantity(200);
        savedInventory.setUnit("箱");
        savedInventory.setUnitPrice(15.00);
        savedInventory.setCategory("食品");

        // 模拟仓库行为
        when(inventoryRepository.save(any(Inventory.class))).thenReturn(savedInventory);

        // 执行测试
        Inventory result = inventoryService.createInventory(newInventory);

        // 验证结果
        assertNotNull(result);
        assertEquals(3L, result.getId());
        assertEquals("新商品", result.getProductName());
        assertNotNull(result.getProductCode()); // 应该有自动生成的编码
        assertEquals(200, result.getQuantity());

        // 验证仓库方法调用
        verify(inventoryRepository).save(any(Inventory.class));
    }

    /**
     * 测试创建库存 - 使用提供的商品编码
     */
    @Test
    void testCreateInventoryWithProvidedCode() {
        // 准备测试数据
        Inventory newInventory = new Inventory();
        newInventory.setProductName("新商品");
        newInventory.setProductCode("CUSTOM001");
        newInventory.setQuantity(200);
        newInventory.setUnit("箱");
        newInventory.setUnitPrice(15.00);

        // 模拟仓库行为
        when(inventoryRepository.save(newInventory)).thenReturn(newInventory);

        // 执行测试
        Inventory result = inventoryService.createInventory(newInventory);

        // 验证结果
        assertNotNull(result);
        assertEquals("CUSTOM001", result.getProductCode());

        // 验证仓库方法调用
        verify(inventoryRepository).save(newInventory);
    }

    /**
     * 测试更新库存
     */
    @Test
    void testUpdateInventory() {
        // 准备测试数据
        Inventory updatedInventory = new Inventory();
        updatedInventory.setId(1L);
        updatedInventory.setProductName("更新后的商品");
        updatedInventory.setQuantity(150);
        updatedInventory.setUnitPrice(12.00);

        // 模拟仓库行为 - 先检查存在性，再保存
        when(inventoryRepository.existsById(1L)).thenReturn(true);
        when(inventoryRepository.save(updatedInventory)).thenReturn(updatedInventory);

        // 执行测试
        Inventory result = inventoryService.updateInventory(updatedInventory);

        // 验证结果
        assertNotNull(result);
        assertEquals(1L, result.getId());
        assertEquals("更新后的商品", result.getProductName());
        assertEquals(150, result.getQuantity());
        assertEquals(12.00, result.getUnitPrice());

        // 验证仓库方法调用
        verify(inventoryRepository).existsById(1L);
        verify(inventoryRepository).save(updatedInventory);
    }

    /**
     * 测试更新库存 - 库存不存在
     */
    @Test
    void testUpdateInventoryNotFound() {
        // 准备测试数据
        Inventory updatedInventory = new Inventory();
        updatedInventory.setId(999L);
        updatedInventory.setProductName("不存在的商品");

        // 模拟仓库行为 - 库存不存在
        when(inventoryRepository.existsById(999L)).thenReturn(false);

        // 执行测试并验证异常
        EntityNotFoundException exception = assertThrows(
                EntityNotFoundException.class,
                () -> inventoryService.updateInventory(updatedInventory)
        );

        assertEquals("库存不存在，ID: 999", exception.getMessage());

        // 验证仓库方法调用
        verify(inventoryRepository).existsById(999L);
        verify(inventoryRepository, never()).save(any(Inventory.class));
    }

    /**
     * 测试删除库存
     */
    @Test
    void testDeleteInventory() {
        // 模拟仓库行为 - 先检查存在性，再删除
        when(inventoryRepository.existsById(1L)).thenReturn(true);
        doNothing().when(inventoryRepository).deleteById(1L);

        // 执行测试
        assertDoesNotThrow(() -> inventoryService.deleteInventory(1L));

        // 验证仓库方法调用
        verify(inventoryRepository).existsById(1L);
        verify(inventoryRepository).deleteById(1L);
    }

    /**
     * 测试删除库存 - 库存不存在
     */
    @Test
    void testDeleteInventoryNotFound() {
        // 模拟仓库行为 - 库存不存在
        when(inventoryRepository.existsById(999L)).thenReturn(false);

        // 执行测试并验证异常
        EntityNotFoundException exception = assertThrows(
                EntityNotFoundException.class,
                () -> inventoryService.deleteInventory(999L)
        );

        assertEquals("库存不存在，ID: 999", exception.getMessage());

        // 验证仓库方法调用
        verify(inventoryRepository).existsById(999L);
        verify(inventoryRepository, never()).deleteById(any(Long.class));
    }

    /**
     * 测试根据商品名称查找库存
     */
    @Test
    void testFindByProductName() {
        // 模拟仓库行为
        when(inventoryRepository.findByProductName("测试商品")).thenReturn(Optional.of(testInventory));

        // 执行测试
        Inventory result = inventoryService.findByProductName("测试商品");

        // 验证结果
        assertNotNull(result);
        assertEquals("测试商品", result.getProductName());
        assertEquals("TEST001", result.getProductCode());

        // 验证仓库方法调用
        verify(inventoryRepository).findByProductName("测试商品");
    }

    /**
     * 测试根据商品名称查找库存 - 商品不存在
     */
    @Test
    void testFindByProductNameNotFound() {
        // 模拟仓库行为
        when(inventoryRepository.findByProductName("不存在的商品")).thenReturn(Optional.empty());

        // 执行测试
        Inventory result = inventoryService.findByProductName("不存在的商品");

        // 验证结果
        assertNull(result);

        // 验证仓库方法调用
        verify(inventoryRepository).findByProductName("不存在的商品");
    }

    /**
     * 测试获取所有商品名称
     */
    @Test
    void testGetAllProductNames() {
        // 模拟仓库行为
        when(inventoryRepository.findAllDistinctProductNames()).thenReturn(Arrays.asList("测试商品", "测试商品2"));

        // 执行测试
        List<String> result = inventoryService.getAllProductNames();

        // 验证结果
        assertNotNull(result);
        assertEquals(2, result.size());
        assertTrue(result.contains("测试商品"));
        assertTrue(result.contains("测试商品2"));

        // 验证仓库方法调用
        verify(inventoryRepository).findAllDistinctProductNames();
    }

    /**
     * 测试获取低库存商品
     * 注意：由于当前InventoryService接口中没有getLowStockItems方法，
     * 这个测试只是为了演示如何测试低库存逻辑
     */
    @Test
    void testGetLowStockItems() {
        // 跳过这个测试，因为InventoryService接口中没有对应的方法
        // 如果需要实现，可以在接口中添加相应方法
        
        // 这里我们测试getAllProductNames方法作为替代
        when(inventoryRepository.findAllDistinctProductNames()).thenReturn(Arrays.asList("测试商品", "测试商品2"));

        List<String> result = inventoryService.getAllProductNames();

        assertNotNull(result);
        assertEquals(2, result.size());
        assertTrue(result.contains("测试商品"));
        assertTrue(result.contains("测试商品2"));

        verify(inventoryRepository).findAllDistinctProductNames();
    }

    /**
     * 测试库存调整 - 使用stockIn方法
     */
    @Test
    void testAdjustInventory() {
        // 模拟仓库行为
        when(inventoryRepository.findById(1L)).thenReturn(Optional.of(testInventory));
        when(inventoryRepository.save(any(Inventory.class))).thenAnswer(invocation -> {
            Inventory inventory = invocation.getArgument(0);
            inventory.setUpdatedAt(LocalDateTime.now());
            return inventory;
        });

        // 准备入库数据
        Inventory stockInData = new Inventory();
        stockInData.setId(1L);
        stockInData.setQuantity(20);

        // 执行测试
        Inventory result = inventoryService.stockIn(stockInData);

        // 验证结果
        assertNotNull(result);
        assertEquals(120, result.getQuantity()); // 原来100 + 调整20 = 120

        // 验证仓库方法调用
        verify(inventoryRepository).findById(1L);
        verify(inventoryRepository).save(testInventory);
    }

    /**
     * 测试库存调整 - 库存不存在
     */
    @Test
    void testAdjustInventoryNotFound() {
        // 模拟仓库行为
        when(inventoryRepository.findById(999L)).thenReturn(Optional.empty());

        // 准备入库数据
        Inventory stockInData = new Inventory();
        stockInData.setId(999L);
        stockInData.setQuantity(20);

        // 执行测试并验证异常
        EntityNotFoundException exception = assertThrows(
                EntityNotFoundException.class,
                () -> inventoryService.stockIn(stockInData)
        );

        assertEquals("库存不存在，ID: 999", exception.getMessage());

        // 验证仓库方法调用
        verify(inventoryRepository).findById(999L);
        verify(inventoryRepository, never()).save(any(Inventory.class));
    }

    /**
     * 测试从商品信息创建或更新库存 - 创建新库存
     */
    @Test
    void testCreateOrUpdateInventoryFromGoodsCreate() {
        // 模拟仓库行为 - 商品不存在
        when(inventoryRepository.findByProductName("新商品")).thenReturn(Optional.empty());
        
        Inventory savedInventory = new Inventory();
        savedInventory.setId(4L);
        savedInventory.setProductName("新商品");
        savedInventory.setProductCode("AUTO004");
        savedInventory.setQuantity(50);
        savedInventory.setUnitPrice(8.00);
        
        when(inventoryRepository.save(any(Inventory.class))).thenReturn(savedInventory);

        // 执行测试
        Inventory result = inventoryService.createOrUpdateInventoryFromGoods(
                "新商品", "CUSTOM004", 50, 8.00);

        // 验证结果
        assertNotNull(result);
        assertEquals("新商品", result.getProductName());
        assertEquals(50, result.getQuantity());
        assertEquals(8.00, result.getUnitPrice());

        // 验证仓库方法调用
        verify(inventoryRepository).findByProductName("新商品");
        verify(inventoryRepository).save(any(Inventory.class));
    }

    /**
     * 测试从商品信息创建或更新库存 - 更新现有库存
     */
    @Test
    void testCreateOrUpdateInventoryFromGoodsUpdate() {
        // 模拟仓库行为 - 商品已存在
        when(inventoryRepository.findByProductName("测试商品")).thenReturn(Optional.of(testInventory));
        when(inventoryRepository.save(testInventory)).thenReturn(testInventory);

        // 执行测试
        Inventory result = inventoryService.createOrUpdateInventoryFromGoods(
                "测试商品", "TEST001", 30, 12.00);

        // 验证结果
        assertNotNull(result);
        assertEquals("测试商品", result.getProductName());
        assertEquals(130, result.getQuantity()); // 原来100 + 新增30 = 130
        assertEquals(12.00, result.getUnitPrice()); // 更新价格

        // 验证仓库方法调用
        verify(inventoryRepository).findByProductName("测试商品");
        verify(inventoryRepository).save(testInventory);
    }

    /**
     * 测试减少库存 - 使用stockOut方法
     */
    @Test
    void testReduceInventory() {
        // 模拟仓库行为
        when(inventoryRepository.findById(1L)).thenReturn(Optional.of(testInventory));
        when(inventoryRepository.save(testInventory)).thenReturn(testInventory);

        // 准备出库数据
        Inventory stockOutData = new Inventory();
        stockOutData.setId(1L);
        stockOutData.setQuantity(20);

        // 执行测试
        Inventory result = inventoryService.stockOut(stockOutData);

        // 验证结果
        assertNotNull(result);
        assertEquals(80, result.getQuantity()); // 原来100 - 减少20 = 80

        // 验证仓库方法调用
        verify(inventoryRepository).findById(1L);
        verify(inventoryRepository).save(testInventory);
    }

    /**
     * 测试减少库存 - 库存不足
     */
    @Test
    void testReduceInventoryInsufficientStock() {
        // 模拟仓库行为
        when(inventoryRepository.findById(1L)).thenReturn(Optional.of(testInventory));

        // 准备出库数据 - 尝试减少150，但只有100
        Inventory stockOutData = new Inventory();
        stockOutData.setId(1L);
        stockOutData.setQuantity(150);

        // 执行测试并验证异常
        IllegalArgumentException exception = assertThrows(
                IllegalArgumentException.class,
                () -> inventoryService.stockOut(stockOutData)
        );

        assertEquals("库存不足，当前库存: 100", exception.getMessage());

        // 验证仓库方法调用
        verify(inventoryRepository).findById(1L);
        verify(inventoryRepository, never()).save(any(Inventory.class));
    }

    /**
     * 测试增加库存 - 使用stockIn方法
     */
    @Test
    void testIncreaseInventory() {
        // 模拟仓库行为
        when(inventoryRepository.findById(1L)).thenReturn(Optional.of(testInventory));
        when(inventoryRepository.save(testInventory)).thenReturn(testInventory);

        // 准备入库数据
        Inventory stockInData = new Inventory();
        stockInData.setId(1L);
        stockInData.setQuantity(30);

        // 执行测试
        Inventory result = inventoryService.stockIn(stockInData);

        // 验证结果
        assertNotNull(result);
        assertEquals(130, result.getQuantity()); // 原来100 + 增加30 = 130

        // 验证仓库方法调用
        verify(inventoryRepository).findById(1L);
        verify(inventoryRepository).save(testInventory);
    }

    /**
     * 测试增加库存 - 库存不存在
     */
    @Test
    void testIncreaseInventoryNotFound() {
        // 模拟仓库行为
        when(inventoryRepository.findById(999L)).thenReturn(Optional.empty());

        // 准备入库数据
        Inventory stockInData = new Inventory();
        stockInData.setId(999L);
        stockInData.setQuantity(30);

        // 执行测试并验证异常
        EntityNotFoundException exception = assertThrows(
                EntityNotFoundException.class,
                () -> inventoryService.stockIn(stockInData)
        );

        assertEquals("库存不存在，ID: 999", exception.getMessage());

        // 验证仓库方法调用
        verify(inventoryRepository).findById(999L);
        verify(inventoryRepository, never()).save(any(Inventory.class));
    }
}